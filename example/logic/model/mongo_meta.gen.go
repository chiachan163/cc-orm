// Code generated by 'micro gen' command.
// DO NOT EDIT!

package model

import (
	"time"
	"unsafe"

	"github.com/chiachan163/cc-orm/model/mongo"
	"github.com/henrylee2cn/erpc/v6"
	"github.com/henrylee2cn/goutil/coarsetime"

	"github.com/chiachan163/cc-orm/example/args"
)

var _ = erpc.Errorf

// Meta comment...
type Meta args.Meta

// ToMeta converts to *Meta type.
func ToMeta(_m *args.Meta) *Meta {
	return (*Meta)(unsafe.Pointer(_m))
}

// ToArgsMeta converts to *args.Meta type.
func ToArgsMeta(_m *Meta) *args.Meta {
	return (*args.Meta)(unsafe.Pointer(_m))
}

// TableName implements 'github.com/xiaoenai/tp-micro/model'.Cacheable
func (*Meta) TableName() string {
	return "meta"
}

func (_m *Meta) isZeroPrimaryKey() bool {
	var __id mongo.ObjectId
	if _m.Id != __id {
		return false
	}
	return true
}

var metaDB, _ = mongoHandler.RegCacheableDB(new(Meta), time.Hour*24)

// GetMetaDB returns the Meta DB handler.
func GetMetaDB() *mongo.CacheableDB {
	return metaDB
}

// UpsertMetaByUid update the Meta data in database by 'uid' unique key.
// NOTE:
//  With cache layer;
//  _updateFields' members must be db field style (snake format);
func UpsertMetaByUid(uid int64, updater mongo.M) error {
	var _m = &Meta{
		Uid:       uid,
		DeletedTs: 0,
	}
	selector := mongo.M{"uid": uid, "deleted_ts": 0}
	err := UpsertMeta(selector, updater)
	if err == nil {
		// Del cache
		err2 := metaDB.DeleteCache(_m, "uid", "deleted_ts")
		if err2 != nil {
			erpc.Errorf("DeleteCache -> err:%s", err2)
		}
	}

	return err
}

// UpsertMeta insert or update the Meta data by selector and updater.
// NOTE:
//  With cache layer;
//  Insert data if the primary key is specified;
//  Update data based on _updateFields if no primary key is specified;
func UpsertMeta(selector, updater mongo.M) error {
	selector["deleted_ts"] = 0
	updater["updated_at"] = coarsetime.FloorTimeNow().Unix()
	return metaDB.WitchCollection(func(col *mongo.Collection) error {
		_, err := col.Upsert(selector, mongo.M{"$set": updater})
		return err
	})
}

// GetMetaByUid query a Meta data from database by 'uid' condition.
// NOTE:
//  With cache layer;
//  If @return error!=nil, means the database error.
func GetMetaByUid(uid int64) (*Meta, bool, error) {
	var _m = &Meta{
		Uid: uid,
	}
	exists, err := GetMetaByFields(_m, "uid")
	if err != nil {
		return nil, false, err
	}
	if !exists {
		return nil, false, nil
	}

	return _m, true, nil
}

// GetMetaByFields query a Meta data from database by WHERE field.
// NOTE:
//  With cache layer;
//  If @return error!=nil, means the database error.
func GetMetaByFields(_m *Meta, _fields ...string) (bool, error) {
	_m.DeletedTs = 0
	_fields = append(_fields, "deleted_ts")
	err := metaDB.CacheGet(_m, _fields...)
	switch err {
	case nil:
		return true, nil
	case mongo.ErrNotFound:
		return false, nil
	default:
		return false, err
	}
}

// GetMetaByWhere query a Meta data from database by WHERE condition.
// NOTE:
//  Without cache layer;
//  If @return error!=nil, means the database error.
func GetMetaByWhere(query mongo.M) (*Meta, bool, error) {
	query["deleted_ts"] = 0
	_m := &Meta{}
	err := metaDB.WitchCollection(func(col *mongo.Collection) error {
		return col.Find(query).One(_m)
	})
	switch err {
	case nil:
		return _m, true, nil
	case mongo.ErrNotFound:
		return nil, false, nil
	default:
		return nil, false, err
	}
}

// DeleteMeta insert or update the Meta data by selector and updater.
// NOTE:
//  Remove data from the hard disk.
func DeleteMeta(selector mongo.M) error {
	return metaDB.WitchCollection(func(col *mongo.Collection) error {
		return col.Remove(selector)
	})
}

// DeleteMetaByUid delete a Meta data in database by 'uid' condition.
// NOTE:
//  With cache layer.
//  If @return error!=nil, means the database error.
func DeleteMetaByUid(uid int64, deleteHard bool) error {
	var err error
	selector := mongo.M{"uid": uid, "deleted_ts": 0}
	if deleteHard {
		// Immediately delete from the hard disk.
		err = DeleteMeta(selector)
	} else {
		// Delay delete from the hard disk.
		updater := mongo.M{"updated_at": coarsetime.FloorTimeNow().Unix(), "deleted_ts": coarsetime.FloorTimeNow().Unix()}
		err = UpsertMeta(selector, updater)
	}
	var _m = &Meta{
		Uid:       uid,
		DeletedTs: 0,
	}
	if err == nil {
		// Del cache
		err2 := metaDB.DeleteCache(_m, "uid", "deleted_ts")
		if err2 != nil {
			erpc.Errorf("DeleteCache -> err:%s", err2)
		}
	}
	return err
}
